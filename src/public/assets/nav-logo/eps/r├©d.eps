%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.3 (Build 18D109) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 269 169
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 269 169
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.76499999 0 0 sc
q
125.3091 0.057999998 m
78.668098 0.057999998 40.849098 37.875 40.849098 84.523003 c
40.849098 131.17599 78.668098 169 125.3091 169 c
171.9671 169 209.7901 131.17599 209.7901 84.523003 c
209.7901 37.875 171.9671 0.057999998 125.3091 0.057999998 c
h
W*
0 0 269 169 rc
35.849098 174 m
214.7901 174 l
214.7901 -4.9419999 l
35.849098 -4.9419999 l
h
f
Q
q
0 47.641201 m
17.264999 90.370201 l
33.854 90.370201 l
16.611 47.641201 l
0 47.641201 l
h
W*
0 0 269 169 rc
-5 95.370201 m
38.854 95.370201 l
38.854 42.641201 l
-5 42.641201 l
h
f
Q
q
213.04401 47.641201 m
230.088 90.370201 l
239.132 90.370201 l
222.089 47.641201 l
213.04401 47.641201 l
h
W*
0 0 269 169 rc
208.04401 95.370201 m
244.132 95.370201 l
244.132 42.641201 l
208.04401 42.641201 l
h
f
Q
q
0 0 269 169 rc
23 0 0 44 246 47 cm
save
207 9 cg_miaiproc 
88 -44 -44{
gsave 1 69 div 1 132 div scale 0 exch translate
currentfile 0 (EOD
)/SubFileDecode filter
L3?{flushfile}{cvx exec}ifelse
69 45 scale
BI
/Width 69
/Height 45
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/DataSource ImageDataSource
/MaskedImage true
ID
EI
grestore} bind for
0 44 m 0 0 l 69 0 l 69 44 l h W n EOD
JcD_Lp]0=RJcF-tp].o*X8i1u/,T5CqtpBiqu6KirqlTlqtpBiqu6KirqlTlqtpBiqu6KirqlTlqtpEm
rr2rm!0[B3s"EGmNPb_r_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:`t8p`rVc`qp],mF
lMpe^/BfRn_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\mEH1mUp],mFkl2su_84"h
!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!rYC!!'n:!;+djqu?EkJcFs6/D+02_Z0\S!!'n:
!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\a4[&T?p]0mbJcGTH0Dk2*`!?Xd!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!)8YU\Ola!6Y>9s"EGoO2Cqt_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\S!!'n:!5ed:`Xi^Zp@e:]p].&gb5X$;.kAL;!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:
_Z0\S!!'n:!8VR3p&FdeJcGTHp&>$]rkg5d!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:o[;1\s7cSFs6fn+fN_\!!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S&-)^J!!'n:!5ed:_Z0\`4$3$5
p],mFnc(9>n*e4%$,Z`C_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:kb4^@s7lWp!.k1?
s"EGpOM_%u_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:`X`UXp%@nUp]0%JR/\_^/M4j?
!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!8MI0n,N._ZN%iB0Cd!!_Z0\S!!'n:!5ed:
_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!)Z=dI7,1!/ggBs")i0?GcaC_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!5ed:coO5Ss7cSFs7cO-qsa*o$4=ZN!5ed:_Z0\S!!'n:!#i`T!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!)5UT^;^R!.k1Es"EJsP/@8"_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:`XWLVo^qeUq>^3iJcGKE/Boe"_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\l
Ci&A9p]0UZOoI*)`l>mr!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:o?YbIs7cT2
s1/.\fjJ4*!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!(A*39L89!1NrKs"F9>n\khB
_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0]#St>*Ep],mFrVm5dPa'&c!5ed:_Z1q^
_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!("J%K,kjk5Y2VJcG]K/C#q'_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\kC23YGl2UMYJc@G(o#Sni!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!;"L]j8\lSqYu?N/D=QB_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\_2E'Lnp]/bBZMuTTo('a-$c;rE_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:
kFA(#s7cSos4[K+k*;4L!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'tH%/f_gi;`QP
KDtqs.krcr!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!(beB\i^`!/CM(o#]"k!!'n:
!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!s%r:bh`<o!/CM)g1+X1!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!(>&2;8**!/^_/r:BO!$k1#R!5ed:_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!9]i@gAgpJir>tW0BSUf_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\U$k3%(o%O-=!4r3Ws")JP1W'1m_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:
gLk0Ns7cSWs82gLo#o4o!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!:n=VfDkUG
N;k'TAS&aZ!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_[6AD_Z0\S!!(>$1XuI"!0@.5r:BO"%1U2T
!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!9]c<jT"cMp]-BT0B\ak_Z0\S!!'n:!5ed:
_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\U$Ock%n^RU6!:p/]s")JP1W'1m_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!5ed:g1=jCs7cT:s2k9oo?PY!!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\S!!'n:!:n=VdJrtAUAsc`/DFfM_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:
_Z0\^0/(WNp]-TZ)Z97"`XWKr!!'n:!5ed:_Z0\S!!'n:!5ed:'Z0nN_Z0\S!!'n:!5ed:_Z0]!Q^?"t
p]-TZ0B\dm_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\U$4?\#na?G9s7cSZs")JQ
1rB:n_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:g1+X9s*t
~> 0 45 m 0 0 l 69 0 l 69 45 l h W n EOD
p]-TZ/C-.0_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\j@q3^^p]0=R\,S,Qd*TZ1
!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:o#]"ss7cT*s53i-gLt9<!!'n:!5ed:
_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!(7r0$+(f!1Wuor:Ta&%hHPX!%,S`!5ed:_Z0\S!!'n:
!5ed:_Z0\S!!'n:!5ed:_Z0\S!!)/IQH9+$!1X!BkFA'[!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\S!!'tE$2a5]s2k<9!1X!>cSd]!!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S
!!(_^@b(MKs7cScs"F#ldDGqa_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0]-aN2@#
p]0mbXoBs,C21Wd!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!6m&G_Z0B2b5^,o0DtP;
`X`Tt!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!),FPf!Iq!2BKIs6-&G_Z0\S!!'n:
!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\U#mpLtn&#,"!29E>co=#&!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\S!!'n:!5ed:_Z0Z?_Z0\i?spbLp].,i0D*`B_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!)Q/`o$gTs7cSis")rACr65Q_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:bpt<Ws7lWp!2oiMr:]j(&.l_Z!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!9KB,
]`7a,gAfIu0Bf(%_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\T#RL=qm_&Sp!4)Xu
s")MW3Ptgs_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:fj8!qs7cSoru^m_eAD7d_Z0\S
!!'n:!5ed:_Z0\S!!'n:!5ed:_Z12I_Z0\S!!'n:!5ed:n\iAVs7cSos")rBD8Q>R_Z0\S!!'n:!5ed:
_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:bUG"'s3^lA!3Q8SrV-',&J;n\!5ed:_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!9K?*^An$/p].Gr0Bf+'_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\T#RL:omC*&i!:'U&s")MY42V$u_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:
fNhdhs7cT2s6ot@p"%^3!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!:[nDZiBe#
Yl>HoDf<Mn!5ed:_Z0\S!!'n:!5ed:_\N4P_Z0\S!!'n:!5ed:_Z0\S!!(4k.'WaH!42\YrV60.&e`(^
!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!9B3%nGg?)p].Z#0Bo7,_Z0\S!!'n:!5ed:
_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\T#7(+lm)]4ks7cT#s")P\4i77"_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!5ed:fNVR^s7cTjs1SFcp".g5!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\S!!'n:!:[h@XoJ.rdf8G//DY;c_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:
_Z0\[-75bmp].l)%fQ1t`tK-(!!'n:!5ed:+N"0Z_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\tNK't<
p].l)0Bo=0_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\T"pXqilh^Xds7cT)s")P^
5JmI$_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:f3)8&s4RGI!5/=bp=\-:!!'n:!5ed:
_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!:R\;VuQMl]`0P=EcT%t!5ed:_Z0\S!!'n:!5ed:
_Z0\S!!'n:!5ed:_Z0\S!!'n:!6ZZ7rr/hqp]0=RhZ#8-q>&&F'Z0nN_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\S!!'n:!5ed:j,8hks7cT/rrhVaVS`B`!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5o'GqWd@As7cT/s")S`5f3R%_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:f2u.K
s7cT2s"F*"g;<pl_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0]*^:r;#aoD,9_Z)1D
FEGD#!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!6ZW5rr02&nc/@a`W%Uiq>&&G'uL"O
_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:j,/_cs7cTbs4%'%lDUZ!!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'q@"o7EIT)\Qcb5_D>/CHjO_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\S!!'n:!5ed:_Z0\g<`Y^ip]/D8-2-*J_Z9eU!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5edC!5ed:_Z0]*]Y'a6p]/D8/DbPn_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\[
+sR$cj8Z[ip]/M;0E(bDa;,Q/!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!)&8Lq*KD
s7cT;s"E]<Wl"f:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:`!$>?kieE6J,
~> 0 45 m 0 0 l 69 0 l 69 45 l h W n EOD
p]/M;0C,X<_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\T"U4_cka;DF!94%Ds")Ve
7)K!)_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:el5V6s7cT>rtG._h896o_Z0\S!!'n:
!5ed:_Z1VU_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:m^fups7cT>s"*&OGJaC\_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!5ed:arqr-rq6;bs7cTAs"F?IqT'Hh_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:
_Z0\S!!'n:!5ed:_Z0\rL5*kNaoD,9dJklcX/j,<!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5epBq<-q8s7--a!7CftdmZ^C!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!(SK
;igtR!:p0Ms"F-'hST?p_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0])\[de$p]/hD
$/^#R_Z0\S!!'n_!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:arhi+rV_fWp]/qG0E1kGa;>c3
!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!)#4L&Ct5s7cTGs"E]?Xht,=_Z0\S!!'n:
!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_ZU,<k2t1n\c;F)fDdDN7n:Gs!5ed:_Z0\S!!'n:!5ed:
_Z0\S!!'n:!5ed:_Z0\S!!'n:!7k"EWW1rWp]0%J0DFA]_ZBnW!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!)Gr[u(.\!!!#Qs"E8VHc#g`_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:ar_`)rV_TQp]0.M!ri)o/BJeK_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\q
K7epYp]0.M.dX@B_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S"9Sc$jlM6sp]0.M
/C[6__Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\e:J]aFWW2_ni;YJ)iShZU!lG!<
_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:mBs@.s3^lA!9!l1i-g$k!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!(+]*WH$9MuWVQp]0@S0E1nIaVu2:!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\S!!'n:!5ed:_Z0\S!!(u/JV!h$s7cTZs8)aKm'*_3!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n="8Lp:Jc>`Mp]0@S+Oj"U_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!!DE
!!'n:!5ed:eP/bhs8Dum!9X;7pu:;N!Wp7>!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!:@/#jo:bKp]0IV0Aq;._Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\Y*$"tUr4W-H
s7cTYs"FBLr5fou_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\qJ:Ng_l2UMYl2NF'
ZEh@J!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5em@pu::as8)cj!;c`bs")Yn9Z$i1
_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:e4`Pes7cQg!:9_'puCDP!s?F@!5ed:_Z0\S
!!'n:!5ed:_Z1DO_Z0\S!!'n:!5ed:_Z0\S!!)AkZ@W&Ms7cT\s"E>]JAV?e_Z0\S!!'n:!5ed:_Z0\S
!!'n:!5ed:_Z0\S!!'n:!5ed:aVu2ur;?$`M?!>Nn,G'?rVahY*Q%jW_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\S!!'n:!5ed:i-p-ns0;V!!:Tq@mBj7<!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:
_Z0\S!!'n<!r([4SH%:Bp]0d_/CdKj_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\d
8kO[7nc/@ao)CB<jQ+2\"2b*=_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:m'*^Fs7--a
!:p.#iIZ[!!!'n:!5ed:_Z0\S*rl;Y!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\Y)B/VPqgne;s7cTes"FBM
rQ60&_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\pI!kYfJcGQGp]1!e0C?0T_Z0\S
!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!Wr,Si6M@rs7cTes")\r:W!/4_Z0\S!!'n:
!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:dn!$)s2k<9!;QRIpuUVT"9cUB!5ed:_Z0\S!!'n:!5ed:
_Z0\S!!'n:!5ed:_Z0\S!!'n:!:-ejJcGWInc/@aq#<#+K7h&A!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\S!!'n:!6?#qrqlSDs6K^[!;ld%rr)f<+<\Q%!%,S`!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:
!5ed:_Z0\S!!(o'H\)4\s7cTks"NlM\&/1G_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:
_Z9f4hr"Hbs69RY!;ldIeko;^!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!(J<8(IX%
s7cTns"F?FpVR+:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0\S!!'n:!5ed:_Z0]&Xf\`*\c;F)rVnML
rr;rqs8DorrVccprVuips8DorrVccprVuips8DorrVccprVuips8Dorrr.WOiW&ZQJcE%UJ,
~> 0 45 m 0 44 l 69 44 l 69 45 l h W n EOD
p],mFMZ88-JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$
JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$
JcC<$JcC<$JcC<$JcC<$JcC<$JcC<$M>r)
~> restore
Q
0.99550945 0.99562985 0.99544221 sc
q
197.3604 90.370201 m
182.34441 90.370201 l
182.34441 90.370201 181.3094 90.370201 180.94341 89.4562 c
172.63341 64.017197 l
164.3304 89.4562 l
163.9644 90.370201 162.9234 90.370201 162.9234 90.370201 c
134.05141 90.370201 l
133.42641 90.370201 132.9024 89.848198 132.9024 89.227203 c
132.9024 80.588203 l
132.9024 87.4412 125.6104 90.370201 121.3404 90.370201 c
111.7784 90.370201 105.3774 84.072197 103.3844 74.4972 c
103.2764 80.849197 102.7484 83.125198 101.0374 85.4562 c
100.2514 86.598198 99.115402 87.558197 97.878403 88.352203 c
95.331398 89.8442 93.044403 90.370201 88.129402 90.370201 c
82.358398 90.370201 l
82.358398 90.370201 81.315399 90.370201 80.947403 89.4562 c
75.696404 76.443199 l
75.696404 89.227203 l
75.696404 89.848198 75.176399 90.370201 74.552399 90.370201 c
61.198399 90.370201 l
61.198399 90.370201 60.1674 90.370201 59.7924 89.4562 c
54.333401 75.925201 l
54.333401 75.925201 53.788399 74.572197 55.034401 74.572197 c
60.1674 74.572197 l
60.1674 48.7882 l
60.1674 48.148201 60.671398 47.641201 61.3144 47.641201 c
74.552399 47.641201 l
75.176399 47.641201 75.696404 48.148201 75.696404 48.7882 c
75.696404 74.572197 l
80.8564 74.572197 l
83.817398 74.572197 84.444397 74.491203 85.596397 73.954201 c
86.290398 73.6922 86.915398 73.162201 87.256401 72.551201 c
87.954399 71.237198 88.129402 69.659203 88.129402 65.006203 c
88.129402 48.7882 l
88.129402 48.148201 88.643402 47.641201 89.278397 47.641201 c
101.9664 47.641201 l
101.9664 47.641201 103.4004 47.641201 103.9674 49.057201 c
106.7794 56.007198 l
110.5184 50.770199 116.6724 47.641201 124.3204 47.641201 c
125.9914 47.641201 l
125.9914 47.641201 127.4344 47.641201 128.0054 49.057201 c
132.9024 61.1852 l
132.9024 48.7882 l
132.9024 48.148201 133.42641 47.641201 134.05141 47.641201 c
147.0034 47.641201 l
147.0034 47.641201 148.4324 47.641201 149.00639 49.057201 c
149.00639 49.057201 154.1864 61.918201 154.20641 62.015202 c
154.2144 62.015202 l
154.41341 63.085201 153.0614 63.085201 153.0614 63.085201 c
148.4384 63.085201 l
148.4384 85.153198 l
162.9834 49.057201 l
163.55141 47.641201 164.9834 47.641201 164.9834 47.641201 c
180.28439 47.641201 l
180.28439 47.641201 181.7244 47.641201 182.2924 49.057201 c
198.4174 88.986198 l
198.9754 90.370201 197.3604 90.370201 197.3604 90.370201 c
197.3604 90.370201 l
h
132.9024 63.085201 m
124.2024 63.085201 l
120.7394 63.085201 117.9224 65.889198 117.9224 69.356201 c
117.9224 72.8172 120.7394 75.639198 124.2024 75.639198 c
126.6354 75.639198 l
130.0894 75.639198 132.9024 72.8172 132.9024 69.356201 c
132.9024 63.085201 l
h
W*
0 0 269 169 rc
49.214741 95.370201 m
203.53464 95.370201 l
203.53464 42.641201 l
49.214741 42.641201 l
h
f
ep
end
%%Trailer
%%EOF
