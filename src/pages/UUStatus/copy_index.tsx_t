import Head from "next/head"
import styled from "styled-components"
import { useContext, useState } from "react"

import Layout from "../../components/Layout"
import { UserStateContext } from "../../components/ContextProviders/UserStatusContext"
import { backendPath } from ".."
import { EndPathUUTjeneste, EndPathUUKrav } from "../../utils/apiHelper"
import { Accordion, BodyShort, GuidePanel, Tag, Tabs } from "@navikt/ds-react"
import { countStatuses } from "../../components/UUStatus/utility"
import {
    ErrorFilledCustomized,
    HelpTextCustomizedGray,
    SuccessFilledCustomized,
} from "../../components/TrafficLights"
import StateManagedSelect from "react-select/dist/declarations/src/stateManager"
import Tab from "@navikt/ds-react/esm/tabs/Tab"
import StatusTableUUTjeneste from "../../components/StatusTableUUTjeneste"

const CustomAccordion = styled(Accordion)`
    width: 50rem;
    background: white;
    border: 2px solid var(--a-gray-200);
    border-radius: 8px;

    @media (min-width: 390px) {
        width: 100%;
        display: block;
    }

    @media (min-width: 850px) {
        width: 50rem;
    }
`
const CustomAccordionHeader = styled(Accordion.Header)`
    .resultpanel {
        display: flex;
        flex-direction: row;
        align-items: center;
    }
`

const UUHeading = styled.div`
    .guidepanel {
        @media (min-width: 390px) {
            margin: 0;
            width: 100%;
        }

        @media (min-width: 850px) {
            margin: 1rem 0 2rem -2.5rem;
            width: 52.2rem;
        }
    }
`
const CustomBodyShort = styled(BodyShort)`
    margin-right: 1rem;
    margin-left: 0.3rem;
    color: var(--a-gray-800);
`

const CustomAccordionContent = styled(Accordion.Content)`
    display: flex;
    flex-direction: row;
    justify-content: space-between;

    .serviceName {
        margin-top: 0.5rem;
    }
`
const TabsCustomized = styled(Tabs)`
    border-top: 0;
    border-top-left-radius: 0;
    border-top-right-radius: 0;
`

/* export const getServerSideProps = async () => {
    const resUniversellUtforming = await fetch(
        backendPath + EndPathUUTjeneste()
    )
    const UUdata = await resUniversellUtforming.json()
    return {
        props: { UUdata },
    }
} */

export async function getServerSideProps(context) {
    console.log("Context inside getserverSideProps: " + context)
    const [resUUTjenester, resUUKrav] = await Promise.all([
        fetch(backendPath + EndPathUUTjeneste()),
        fetch(backendPath + EndPathUUKrav()),
    ])
    const [UUDataTjenester, UUDataKrav] = await Promise.all([
        resUUTjenester.json(),
        resUUKrav.json(),
    ])
    return { props: { UUDataTjenester, UUDataKrav } }
}

const UUDashboard = ({ UUDataTjenester, UUDataKrav }) => {
    const user = useContext(UserStateContext)
    console.log(UUDataTjenester)
    console.log(UUDataKrav)

    const statusLabel = (result) => {
        switch (result) {
            case "Passed":
                return (
                    <Tag variant="success">
                        Passed <SuccessFilledCustomized />
                    </Tag>
                )
            case "Failed":
                return (
                    <Tag variant="error">
                        Failed <ErrorFilledCustomized />
                    </Tag>
                )
            case "Cannot tell":
                return (
                    <Tag variant="neutral">
                        Cannot tell <HelpTextCustomizedGray />
                    </Tag>
                )
            case "Not checked":
                return (
                    <Tag variant="neutral">
                        Not checked <HelpTextCustomizedGray />
                    </Tag>
                )
            case "Not present":
                return (
                    <Tag variant="neutral">
                        Not present <HelpTextCustomizedGray />
                    </Tag>
                )
            default:
                return <Tag variant="neutral">Ingen status</Tag>
        }
    }

    const uuServiceName = (name) => {
        let shortName = name.replace("WCAG21:", "")
        let formattedName = shortName.replaceAll("-", " ")
        let capitalizedName =
            formattedName.charAt(0).toUpperCase() + formattedName.slice(1)
        return capitalizedName
    }

    const [state, setState] = useState("tjeneste")

    const handleNewSelectedTab = (aksjon: String) => {
        switch (aksjon) {
            case "tjeneste":
                console.log("Tjeneste er valgt")

                return ""
            case "krav":
                console.log("Krav er valgt")
                return ""
        }
    }

    return (
        <Layout>
            <Head>
                <title>UU Status - status.nav.no</title>
                <link rel="icon" href="/sp/favicon.ico" />
                <meta
                    name="viewport"
                    content="initial-scale=1.0, width=device-width"
                />
                <meta name="title" content="Navstatus" />
                <meta
                    name="description"
                    content="Status Nav digitale tjenester er en oversiktsside for Navs ulike tjenester til borgere, arbeidsgivere og samarbeidspartnere."
                />
                <meta
                    property="image"
                    content="https://www.nav.no/dekoratoren/media/nav-logo-red.svg"
                />
                <meta property="url" content="https://status.nav.no/sp" />
                <meta property="type" content="website" />

                {/* <!-- Open Graph / Facebook --> */}
                <meta
                    property="og:site_name"
                    content="Status Nav digitale tjenester"
                />
                <meta
                    property="og:title"
                    content="Status Nav digitale tjenester"
                />
                <meta
                    property="og:description"
                    content="Status Nav digitale tjenester er en oversiktsside for Navs ulike tjenester til borgere, arbeidsgivere og samarbeidspartnere."
                />
                <meta
                    property="og:image"
                    content="https://www.nav.no/dekoratoren/media/nav-logo-red.svg"
                />
                <meta property="og:url" content="https://status.nav.no/sp" />
                <meta property="og:type" content="website" />

                {/* <!-- Twitter --> */}
                <meta property="twitter:card" content="summary_large_image" />
                <meta
                    property="twitter:url"
                    content="https://status.nav.no/sp"
                />
                <meta property="twitter:title" content="Navstatus" />
                <meta
                    property="twitter:description"
                    content="Status Nav digitale tjenester er en oversiktsside for Navs ulike tjenester til borgere, arbeidsgivere og samarbeidspartnere."
                />
                <meta
                    property="twitter:image"
                    content="https://www.nav.no/dekoratoren/media/nav-logo-red.svg"
                />
            </Head>
            <UUHeading>
                <GuidePanel className="guidepanel">
                    Her finner du informasjon om status for universell utforming
                    for digitale tjenester i NAV. Kravene er hentet fra
                    <b> Web Content Accessibility Guidelines (WCAG) 2.1.</b>
                </GuidePanel>
            </UUHeading>
            <div>
                <TabsCustomized
                    defaultValue="Tjenester"
                    value={state}
                    onChange={setState}
                >
                    <Tabs.List>
                        <Tabs.Tab
                            key={0}
                            value={"tjeneste"}
                            label={"Tjeneste"}
                            onClick={() => handleNewSelectedTab("tjeneste")}
                        />
                        <Tabs.Tab
                            key={1}
                            value={"krav"}
                            label={"Krav"}
                            onClick={() => handleNewSelectedTab("krav")}
                        />
                    </Tabs.List>
                    <Tabs.Panel
                        value="tjeneste"
                        className="h-24 w-full bg-gray-50 p-4"
                    >
                        Tjeneste-tab //Legge inn kall til komponent der en
                        sender med n√∏dvendige data
                        <StatusTableUUTjeneste
                            UUdataTjeneste={UUDataTjenester}
                        />
                        <CustomAccordion>
                            {UUDataTjenester &&
                                UUDataTjenester.length > 0 &&
                                UUDataTjenester.map(
                                    ({ name, krav }, index: any) => (
                                        <Accordion.Item key={index}>
                                            <CustomAccordionHeader>
                                                {name}
                                                <div className="resultpanel">
                                                    <SuccessFilledCustomized />
                                                    <CustomBodyShort>
                                                        {countStatuses(
                                                            krav,
                                                            "Passed"
                                                        )}
                                                    </CustomBodyShort>
                                                    <ErrorFilledCustomized />
                                                    <CustomBodyShort>
                                                        {countStatuses(
                                                            krav,
                                                            "Failed"
                                                        )}
                                                    </CustomBodyShort>
                                                    <HelpTextCustomizedGray />
                                                    <CustomBodyShort>
                                                        {krav.length -
                                                            (countStatuses(
                                                                krav,
                                                                "Passed"
                                                            ) +
                                                                countStatuses(
                                                                    krav,
                                                                    "Failed"
                                                                ))}
                                                    </CustomBodyShort>
                                                </div>
                                            </CustomAccordionHeader>
                                            {krav &&
                                                krav.length > 0 &&
                                                krav.map(({ id, result }) => (
                                                    <CustomAccordionContent>
                                                        <BodyShort className="serviceName">
                                                            {uuServiceName(id)}
                                                        </BodyShort>

                                                        {statusLabel(result)}
                                                    </CustomAccordionContent>
                                                ))}
                                        </Accordion.Item>
                                    )
                                )}
                        </CustomAccordion>
                    </Tabs.Panel>
                    <Tabs.Panel
                        value="krav"
                        className="h-24 w-full bg-gray-50 p-4"
                    >
                        Krav-tab
                        <CustomAccordion>
                            {UUDataKrav &&
                                UUDataKrav.length > 0 &&
                                UUDataKrav.map(({ navn, subject }, index) => (
                                    <Accordion.Item>
                                        <CustomAccordionHeader>
                                            {navn}
                                            <div className="resultpanel">
                                                <SuccessFilledCustomized />
                                                <CustomBodyShort>
                                                    {countStatuses(
                                                        subject,
                                                        "Passed"
                                                    )}
                                                </CustomBodyShort>
                                                <ErrorFilledCustomized />
                                                <CustomBodyShort>
                                                    {countStatuses(
                                                        subject,
                                                        "Failed"
                                                    )}
                                                </CustomBodyShort>
                                                <HelpTextCustomizedGray />
                                                <CustomBodyShort>
                                                    {subject.length -
                                                        (countStatuses(
                                                            subject,
                                                            "Passed"
                                                        ) +
                                                            countStatuses(
                                                                subject,
                                                                "Failed"
                                                            ))}
                                                </CustomBodyShort>
                                            </div>
                                        </CustomAccordionHeader>
                                        {subject &&
                                            subject.length > 0 &&
                                            subject.map(
                                                ({ subject, result }) => (
                                                    <CustomAccordionContent>
                                                        <BodyShort className="serviceName">
                                                            {uuServiceName(
                                                                subject
                                                            )}
                                                        </BodyShort>

                                                        {statusLabel(result)}
                                                    </CustomAccordionContent>
                                                )
                                            )}
                                    </Accordion.Item>
                                ))}
                        </CustomAccordion>
                    </Tabs.Panel>
                </TabsCustomized>
            </div>
        </Layout>
    )
}

export default UUDashboard
